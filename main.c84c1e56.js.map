{"version":3,"sources":["scripts/main.js"],"names":["listUrl","getPhonesAllSuccessful","url","Promise","resolve","reject","fetch","then","response","json","result","all","phones","map","phone","id","setTimeout","Error","body","document","querySelector","countOfMessages","getListForAllSuccessful","listOfAllSuccessful","createElement","headingOfSuccessful","textContent","classList","add","append","item","listItem","style","top","getPhoneFirstReceived","race","getListForFirstReceived","listOfFirstReceived","headingOfFirstReceived","getPhonesThree","slice","countOfLines","getListForThree","listOfThree","headingOfThree"],"mappings":";AAAA,aAEA,IAAMA,EACJ,wEAEF,SAASC,EAAuBC,GACvB,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAMJ,GACHK,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GAAUP,OAAAA,QAAQQ,IAAID,KAC3BH,KAAK,SAAAK,GAAUR,OAAAA,EAAQQ,EAAOC,IAAI,SAAAC,GAASA,OAAAA,EAAMC,QAEpDC,WAAW,WACTX,EAAO,IAAIY,QACV,OAIP,IAAMC,EAAOC,SAASC,cAAc,QAChCC,EAAkB,EAEtB,SAASC,EAAwBV,GACzBW,IAAAA,EAAsBJ,SAASK,cAAc,MAC7CC,EAAsBN,SAASK,cAAc,MAEnDC,EAAoBC,YAAc,iBAClCD,EAAoBE,UAAUC,IAAI,iBAAkB,WAEpDL,EAAoBM,OAAOJ,GAE3Bb,EAAOC,IAAI,SAAAiB,GACHC,IAAAA,EAAWZ,SAASK,cAAc,MAExCO,EAASL,YAAcI,EACvBC,EAASJ,UAAUC,IAAI,kBACvBG,EAASC,MAAMC,IAAM,GAAKZ,EAAkB,KAC5CA,IACAE,EAAoBM,OAAOE,KAG7Bb,EAAKW,OAAON,GAMd,SAASW,EAAsBhC,GACtB,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAMJ,GACHK,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GAAUP,OAAAA,QAAQgC,KAAKzB,KAC5BH,KAAK,SAAAO,GAASV,OAAAA,EAAQU,EAAMC,MAE/BC,WAAW,WACTX,EAAO,IAAIY,QACV,OAIP,SAASmB,EAAwBtB,GACzBuB,IAAAA,EAAsBlB,SAASK,cAAc,MAC7Cc,EAAyBnB,SAASK,cAAc,MAEtDc,EAAuBZ,YAAc,iBACrCY,EAAuBX,UAAUC,IAAI,iBAAkB,WAEvDS,EAAoBR,OAAOS,GAErBP,IAAAA,EAAWZ,SAASK,cAAc,MAExCO,EAASL,YAAcZ,EACvBiB,EAASJ,UAAUC,IAAI,kBAEvBS,EAAoBR,OAAOE,GAE3Bb,EAAKW,OAAOQ,GAMd,SAASE,EAAerC,GACf,OAAA,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,MAAMJ,GACHK,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAG,GAAUP,OAAAA,QAAQQ,IAAID,KAC3BH,KAAK,SAAAK,GAAUR,OAAAA,EAAQQ,EAAOC,IAAI,SAAAC,GAASA,OAAAA,EAAMC,KAAIyB,MAAM,EAAG,MAEjExB,WAAW,WACTX,EAAO,IAAIY,QACV,OA/CPhB,EAAuBD,GACpBO,KAAKe,GAkCRY,EAAsBlC,GACnBO,KAAK6B,GAeR,IAAIK,EAAe,EAEnB,SAASC,EAAgB9B,GACjB+B,IAAAA,EAAcxB,SAASK,cAAc,MACrCoB,EAAiBzB,SAASK,cAAc,MAE9CoB,EAAelB,YAAc,iBAC7BkB,EAAejB,UAAUC,IAAI,QAAS,WAEtCe,EAAYd,OAAOe,GAEnBhC,EAAOC,IAAI,SAAAiB,GACHC,IAAAA,EAAWZ,SAASK,cAAc,MAExCO,EAASL,YAAcI,EACvBC,EAASJ,UAAUC,IAAI,SACvBG,EAASC,MAAMC,IAAM,GAAKQ,EAAe,KACzCA,IACAE,EAAYd,OAAOE,KAGrBb,EAAKW,OAAOc,GAGdJ,EAAevC,GACZO,KAAKmC","file":"main.c84c1e56.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst listUrl\n= 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\n\nfunction getPhonesAllSuccessful(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(response => response.json())\n      .then(result => Promise.all(result))\n      .then(phones => resolve(phones.map(phone => phone.id)));\n\n    setTimeout(() => {\n      reject(new Error());\n    }, 5000);\n  });\n}\n\nconst body = document.querySelector('body');\nlet countOfMessages = 1;\n\nfunction getListForAllSuccessful(phones) {\n  const listOfAllSuccessful = document.createElement('ul');\n  const headingOfSuccessful = document.createElement('h3');\n\n  headingOfSuccessful.textContent = 'All Successful';\n  headingOfSuccessful.classList.add('all-successful', 'heading');\n\n  listOfAllSuccessful.append(headingOfSuccessful);\n\n  phones.map(item => {\n    const listItem = document.createElement('li');\n\n    listItem.textContent = item;\n    listItem.classList.add('all-successful');\n    listItem.style.top = 30 * countOfMessages + 'px';\n    countOfMessages++;\n    listOfAllSuccessful.append(listItem);\n  });\n\n  body.append(listOfAllSuccessful);\n};\n\ngetPhonesAllSuccessful(listUrl)\n  .then(getListForAllSuccessful);\n\nfunction getPhoneFirstReceived(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(response => response.json())\n      .then(result => Promise.race(result))\n      .then(phone => resolve(phone.id));\n\n    setTimeout(() => {\n      reject(new Error());\n    }, 5000);\n  });\n}\n\nfunction getListForFirstReceived(phone) {\n  const listOfFirstReceived = document.createElement('ul');\n  const headingOfFirstReceived = document.createElement('h3');\n\n  headingOfFirstReceived.textContent = 'First Received';\n  headingOfFirstReceived.classList.add('first-received', 'heading');\n\n  listOfFirstReceived.append(headingOfFirstReceived);\n\n  const listItem = document.createElement('li');\n\n  listItem.textContent = phone;\n  listItem.classList.add('first-received');\n\n  listOfFirstReceived.append(listItem);\n\n  body.append(listOfFirstReceived);\n};\n\ngetPhoneFirstReceived(listUrl)\n  .then(getListForFirstReceived);\n\nfunction getPhonesThree(url) {\n  return new Promise((resolve, reject) => {\n    fetch(url)\n      .then(response => response.json())\n      .then(result => Promise.all(result))\n      .then(phones => resolve(phones.map(phone => phone.id).slice(0, 3)));\n\n    setTimeout(() => {\n      reject(new Error());\n    }, 5000);\n  });\n}\n\nlet countOfLines = 1;\n\nfunction getListForThree(phones) {\n  const listOfThree = document.createElement('ul');\n  const headingOfThree = document.createElement('h3');\n\n  headingOfThree.textContent = 'Three Received';\n  headingOfThree.classList.add('three', 'heading');\n\n  listOfThree.append(headingOfThree);\n\n  phones.map(item => {\n    const listItem = document.createElement('li');\n\n    listItem.textContent = item;\n    listItem.classList.add('three');\n    listItem.style.top = 30 * countOfLines + 'px';\n    countOfLines++;\n    listOfThree.append(listItem);\n  });\n\n  body.append(listOfThree);\n};\n\ngetPhonesThree(listUrl)\n  .then(getListForThree);\n"]}